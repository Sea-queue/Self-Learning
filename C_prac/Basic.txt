Basic of C:
-----------

comments:
---------
// single line comments
/* block comments */

If you know how many things in an array you can initialized an array with
fixed size, if you need to dynamically allocate, use following:

C Dynamic Memory Allocation can be defined as a procesure in which the size of
a data structure (like Array) is changed during the runtime. There are 4 library
functions provided by C defined under <stdlib.h> header file to facilitate
dynamic memory allocation in C programming:

malloc() : memory allocation
           It returns a pointer of type void which can be cast into a pointer of
           any form. It doesn't initialize memory at execution time so that it
           has initialized each block with the default garbage value initially.

           ptr = (cast_type*) malloc(byte_size)
           ptr = (int*) malloc(100*sizeof(int));

           Since the size of int is 4 bytes, this statement will allocate 400
           bytes of memory, And, the pointer ptr holds the address of the first
           byte in the allocated memory.

calloc() : contiguous alloaction
           dynamically allocate the specified number of blocks of memory of the
           specified type. It initializes each block with a default value '0'.
           It has two parameters or arguments as compare to malloc().

           ptr = (cast_type*) calloc(n, element_size);
           ptr = (float*) calloc(25, sizeof(float));

           this statement allocates contiguous space in memory for 25 elements
           each with the size of the float.


free() : "free" methos in C is used to dynamically de-allocate the memory. The
         memory allocated using functions malloc() and calloc() is not de-acclocated
         on thier own. Hence the free() method is used whenver the dynamic memory
         allocation takes place. It helps to reduce wastage of memory by freeing it.

realloc() : re-allocation
         dynamically change the memory allocation of a previously allocated memory.
         In other words, if the memory previously allocated with the help of malloc
         or calloc is insufficient, realloc can be used to dynamically re-allocate
         memory. re-allocation of memory maintains the already present value and
         new blocks will be initialized with the defaul gargage value.

         ptr = realloc(ptr, newSize);

         int* ptr = (int*) malloc(5 * sizeof(int)); # ptr now has 20-bytes of memory
         ptr = realloc(ptr, 10*sizeof(int));  # ptr now has 40-bytes of memory
